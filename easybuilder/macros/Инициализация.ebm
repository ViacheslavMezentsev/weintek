// Проект: 5491.
// Назначение: Первоначальная инициализация регистров панели.
// Автор: Мезенцев Вячеслав
// Дата: 06 августа 2015 г.
// Настройки: Однократно выполнить при старте панели.

unsigned short LIMITS_COUNT = 68
unsigned short PLACES_COUNT = 16
unsigned short LEVELS_PLACES_COUNT = 10
unsigned short TABLO_PLACES_COUNT = 34
unsigned short CHANNELS_COUNT = 34
unsigned short NAME_LENGTH = 32

// Список каналов.
unsigned short ChannelsItems[ 544 ]

// Список положений.
unsigned short PlacesItems[ 256 ]

// Начальное положение каналов.
unsigned short A1Places[ 16 ] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
unsigned short A2Places[ 16 ] = { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
unsigned short A3Places[ 16 ] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }

unsigned short TPlaces[ 34 ] = { 10, 3, 21, 31, 7, 29, 11, 4, 22, 32, 17, 8, 12, 5, 23, 33, 6, 28, 26, 27, 30, 25, 24, 14, 1, 2, 19, 20, 13, 15, 18, 9, 16, 34 }

unsigned short L1Places[ 10 ] = { 26, 10, 3, 21, 31, 1, 11, 4, 22, 32 }
unsigned short L2Places[ 10 ] = { 12, 5, 23, 33, 16, 27, 2, 9, 18, 34 }
unsigned short L3Places[ 10 ] = { 30, 25, 24, 13, 29, 19, 20, 8, 15, 7 }

// region Список сигналов.

// "Т отходов       "
char Data1[32] = { 0x22, 0x04, 0x20, 0x00, 0x3E, 0x04, 0x42, 0x04, 0x45, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x3E, 0x04, 0x32, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T доб. воды     "
char Data2[32] = { 0x54, 0x00, 0x20, 0x00, 0x34, 0x04, 0x3E, 0x04, 0x31, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x4B, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T подг. секц. 1 "
char Data3[32] = { 0x54, 0x00, 0x20, 0x00, 0x3F, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x31, 0x00, 0x20, 0x00 }

// "T метан. секц. 2"
char Data4[32] = { 0x54, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x00 }

// "T метан. секц. 3"
char Data5[32] = { 0x54, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x33, 0x00 }

// "T CO2            "
char Data6[32] = { 0x54, 0x00, 0x20, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x32, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T биогаза        "
char Data7[32] = { 0x54, 0x00, 0x20, 0x00, 0x31, 0x04, 0x38, 0x04, 0x3E, 0x04, 0x33, 0x04, 0x30, 0x04, 0x37, 0x04, 0x30, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G эффлюента     "
char Data8[32] = { 0x47, 0x00, 0x20, 0x00, 0x4D, 0x04, 0x44, 0x04, 0x44, 0x04, 0x3B, 0x04, 0x4E, 0x04, 0x35, 0x04, 0x3D, 0x04, 0x42, 0x04, 0x30, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G рег. воды     "
char Data9[32] = { 0x47, 0x00, 0x20, 0x00, 0x40, 0x04, 0x35, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x4B, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "H подг. секц. 1 "
char Data10[32] = { 0x48, 0x00, 0x20, 0x00, 0x3F, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x31, 0x00, 0x20, 0x00 }

// "H метан. секц. 2"
char Data11[32] = { 0x48, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x00 }

// "H метан. секц. 3"
char Data12[32] = { 0x48, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x33, 0x00 }

// "Q CH4            "
char Data13[32] = { 0x51, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "Q CO2            "
char Data14[32] = { 0x51, 0x00, 0x20, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x32, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "Q H2            "
char Data15[32] = { 0x51, 0x00, 0x20, 0x00, 0x48, 0x00, 0x32, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T окр. среды    "
char Data16[32] = { 0x54, 0x00, 0x20, 0x00, 0x3E, 0x04, 0x3A, 0x04, 0x40, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x40, 0x04, 0x35, 0x04, 0x34, 0x04, 0x4B, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T эффлюента     "
char Data17[32] = { 0x54, 0x00, 0x20, 0x00, 0x4D, 0x04, 0x44, 0x04, 0x44, 0x04, 0x3B, 0x04, 0x4E, 0x04, 0x35, 0x04, 0x3D, 0x04, 0x42, 0x04, 0x30, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T рег. воды     "
char Data18[32] = { 0x54, 0x00, 0x20, 0x00, 0x40, 0x04, 0x35, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x4B, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T ГВ на входе    "
char Data19[32] = { 0x54, 0x00, 0x20, 0x00, 0x13, 0x04, 0x12, 0x04, 0x20, 0x00, 0x3D, 0x04, 0x30, 0x04, 0x20, 0x00, 0x32, 0x04, 0x45, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x35, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "T ГВ на выходе "
char Data20[32] = { 0x54, 0x00, 0x20, 0x00, 0x13, 0x04, 0x12, 0x04, 0x20, 0x00, 0x3D, 0x04, 0x30, 0x04, 0x20, 0x00, 0x32, 0x04, 0x4B, 0x04, 0x45, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x35, 0x04, 0x20, 0x00, 0x20, 0x00 }

// "P подг. секц. 1 "
char Data21[32] = { 0x50, 0x00, 0x20, 0x00, 0x3F, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x31, 0x00, 0x20, 0x00 }

// "P метан. секц. 2"
char Data22[32] = { 0x50, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x00 }

// "P метан. секц. 3"
char Data23[32] = { 0x50, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x33, 0x00 }

// "P газгольдер    "
char Data24[32] = { 0x50, 0x00, 0x20, 0x00, 0x33, 0x04, 0x30, 0x04, 0x37, 0x04, 0x33, 0x04, 0x3E, 0x04, 0x3B, 0x04, 0x4C, 0x04, 0x34, 0x04, 0x35, 0x04, 0x40, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "P вх. ц. насоса "
char Data25[32] = { 0x50, 0x00, 0x20, 0x00, 0x32, 0x04, 0x45, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x3D, 0x04, 0x30, 0x04, 0x41, 0x04, 0x3E, 0x04, 0x41, 0x04, 0x30, 0x04, 0x20, 0x00 }

// "V отходов        "
char Data26[32] = { 0x56, 0x00, 0x20, 0x00, 0x3E, 0x04, 0x42, 0x04, 0x45, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x3E, 0x04, 0x32, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G доб. воды     "
char Data27[32] = { 0x47, 0x00, 0x20, 0x00, 0x34, 0x04, 0x3E, 0x04, 0x31, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x4B, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G CO2            "
char Data28[32] = { 0x47, 0x00, 0x20, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x32, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G биогаза        "
char Data29[32] = { 0x47, 0x00, 0x20, 0x00, 0x31, 0x04, 0x38, 0x04, 0x3E, 0x04, 0x33, 0x04, 0x30, 0x04, 0x37, 0x04, 0x30, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "G ГВ            "
char Data30[32] = { 0x47, 0x00, 0x20, 0x00, 0x13, 0x04, 0x12, 0x04, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// "pH подг. секц. 1"
char Data31[32] = { 0x70, 0x00, 0x48, 0x00, 0x20, 0x00, 0x3F, 0x04, 0x3E, 0x04, 0x34, 0x04, 0x33, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x31, 0x00 }

// "pH мет. секц. 2 "
char Data32[32] = { 0x70, 0x00, 0x48, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x00, 0x20, 0x00 }

// "pH мет. секц. 3 "
char Data33[32] = { 0x70, 0x00, 0x48, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x35, 0x04, 0x42, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x41, 0x04, 0x35, 0x04, 0x3A, 0x04, 0x46, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x33, 0x00, 0x20, 0x00 }

// "P акт. мгн.     "
char Data34[32] = {	0x50, 0x00, 0x20, 0x00, 0x30, 0x04, 0x3A, 0x04, 0x42, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x3C, 0x04, 0x33, 0x04, 0x3D, 0x04, 0x2E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00 }

// end region
    
// Значения пределов для уровней.
int Limits[ 68 ]


// Заполняем список каналов.
sub FillChannelsList()

    SetData( Data1[0], "Панель", "Имя канала 1", NAME_LENGTH )
    SetData( Data2[0], "Панель", "Имя канала 2", NAME_LENGTH )
    SetData( Data3[0], "Панель", "Имя канала 3", NAME_LENGTH )
    SetData( Data4[0], "Панель", "Имя канала 4", NAME_LENGTH )
    SetData( Data5[0], "Панель", "Имя канала 5", NAME_LENGTH )
    SetData( Data6[0], "Панель", "Имя канала 6", NAME_LENGTH )
    SetData( Data7[0], "Панель", "Имя канала 7", NAME_LENGTH )
    SetData( Data8[0], "Панель", "Имя канала 8", NAME_LENGTH )
    SetData( Data9[0], "Панель", "Имя канала 9", NAME_LENGTH )
    SetData( Data10[0], "Панель", "Имя канала 10", NAME_LENGTH )
    SetData( Data11[0], "Панель", "Имя канала 11", NAME_LENGTH )
    SetData( Data12[0], "Панель", "Имя канала 12", NAME_LENGTH )
    SetData( Data13[0], "Панель", "Имя канала 13", NAME_LENGTH )
    SetData( Data14[0], "Панель", "Имя канала 14", NAME_LENGTH )
    SetData( Data15[0], "Панель", "Имя канала 15", NAME_LENGTH )
    SetData( Data16[0], "Панель", "Имя канала 16", NAME_LENGTH )
    SetData( Data17[0], "Панель", "Имя канала 17", NAME_LENGTH )
    SetData( Data18[0], "Панель", "Имя канала 18", NAME_LENGTH )
    SetData( Data19[0], "Панель", "Имя канала 19", NAME_LENGTH )
    SetData( Data20[0], "Панель", "Имя канала 20", NAME_LENGTH )
    SetData( Data21[0], "Панель", "Имя канала 21", NAME_LENGTH )
    SetData( Data22[0], "Панель", "Имя канала 22", NAME_LENGTH )
    SetData( Data23[0], "Панель", "Имя канала 23", NAME_LENGTH )
    SetData( Data24[0], "Панель", "Имя канала 24", NAME_LENGTH )
    SetData( Data25[0], "Панель", "Имя канала 25", NAME_LENGTH )
    SetData( Data26[0], "Панель", "Имя канала 26", NAME_LENGTH )
    SetData( Data27[0], "Панель", "Имя канала 27", NAME_LENGTH )
    SetData( Data28[0], "Панель", "Имя канала 28", NAME_LENGTH )
    SetData( Data29[0], "Панель", "Имя канала 29", NAME_LENGTH )
    SetData( Data30[0], "Панель", "Имя канала 30", NAME_LENGTH )
    SetData( Data31[0], "Панель", "Имя канала 31", NAME_LENGTH )
    SetData( Data32[0], "Панель", "Имя канала 32", NAME_LENGTH )
    SetData( Data33[0], "Панель", "Имя канала 33", NAME_LENGTH )   
    SetData( Data34[0], "Панель", "Имя канала 34", NAME_LENGTH )
    
    // Записываем начальное положение каналов.
    SetData( A1Places[0], "Панель", "А1Пx НК", PLACES_COUNT )
    SetData( A2Places[0], "Панель", "А2Пx НК", PLACES_COUNT )
    SetData( A3Places[0], "Панель", "А3Пx НК", PLACES_COUNT )

    SetData( TPlaces[0], "Панель", "ТПx НК", TABLO_PLACES_COUNT )

    SetData( L1Places[0], "Панель", "У1Пx НК", LEVELS_PLACES_COUNT )
    SetData( L2Places[0], "Панель", "У2Пx НК", LEVELS_PLACES_COUNT )
    SetData( L3Places[0], "Панель", "У3Пx НК", LEVELS_PLACES_COUNT )
    
end sub


// Копируем список каналов в список положений.
sub CopyChannelsToPlaces()

    bool tmp = false
	unsigned short n = 0, m = 0, k = 0, offset = 0, value = 0
    short svalue = 0
	unsigned int val32 = 0
    int sval32 = 0
    
    GetData( ChannelsItems[0], "Панель", "Список каналов", CHANNELS_COUNT * 16 )
    
    for n = 0 to PLACES_COUNT - 1
    
        m = A1Places[n] - 1
    
        if m == -1 then
    
            continue
    
        end if
    
        // Копируем имя канала в текст положения.
        for k = 0 to 15
    
            offset = m * 16 + k
            value = ChannelsItems[ offset ]
    
            offset = n * 16 + k
            PlacesItems[ offset ] = value
    
        next
    
    next
    
    SetData( PlacesItems[0], "Панель", "Список положений", PLACES_COUNT * 16 )      
    
end sub


// Установка начальных настроек.
sub SetDefaultSettings()

    bool tmp = false
	unsigned short value = 0
    short svalue = 0
	unsigned int val32 = 0
    int sval32 = 0

    // Устанваливаем нажатой кнопку "Реактор".
    tmp = true
    SetData( tmp, "Панель", "Меню | Реактор", 1 )

	// Окно Параметры. Вкладка Секция 1.
	SetData( tmp, "Панель", "Вкладка | Секция 1", 1 )

	value = 20

	// Окно Параметры. Тело таблицы - Секция 1.
	SetData( value, "Панель", "Тело таблицы заданий", 1 )

    // Копируем текущую дату и используем её в качестве даты
    // последней прошивки.
    GetData( value, "Панель", "Год", 1 )
    SetData( value, "Панель", "Дата загрузки (год)", 1 )

    GetData( value, "Панель", "Месяц", 1 )
    SetData( value, "Панель", "Дата загрузки (месяц)", 1 )

    GetData( value, "Панель", "День", 1 )
    SetData( value, "Панель", "Дата загрузки (день)", 1 )

	// Диапазон времени для графика: 1 час.
	val32 = 1 * 3600

	SetData( val32, "Панель", "Интервал времени (ось X)", 1 )

	// Y max.
	// Число, умноженное на коэффициент 10.
	sval32 = 10 * 850
    SetData( sval32, "Панель", "Y макс", 1 )
	SetData( sval32, "Панель", "А1 Y макс", 1 )
	SetData( sval32, "Панель", "А2 Y макс", 1 )
	SetData( sval32, "Панель", "А3 Y макс", 1 )

	// Y min.
	sval32 = 0
    SetData( sval32, "Панель", "Y мин", 1 )
	SetData( sval32, "Панель", "А1 Y мин", 1 )
	SetData( sval32, "Панель", "А2 Y мин", 1 )
	SetData( sval32, "Панель", "А3 Y мин", 1 )

	// Архив.
	// Показываем все каналы (16).
    val32 = 0x0000FFFF
    SetData( val32, "Панель", "А1 Маска (мл DWORD)", 1 )
    SetData( val32, "Панель", "А2 Маска (мл DWORD)", 1 )
    SetData( val32, "Панель", "А3 Маска (мл DWORD)", 1 )

    val32 = 0x00000000
    SetData( val32, "Панель", "А1 Маска (ст DWORD)", 1 )
    SetData( val32, "Панель", "А2 Маска (ст DWORD)", 1 )
    SetData( val32, "Панель", "А3 Маска (ст DWORD)", 1 )

end sub


// Загрузка настроек.
sub LoadSettings()

    bool tmp = false
    int sval32 = 0

    // Включить режим VNC.
    tmp = true
    SetData( tmp, "Панель", "Включен режим VNC", 1 )

    // Устанавливаем нажатой кнопку "Реактор".
    tmp = true
    SetData( tmp, "Панель", "Меню | Реактор", 1 )

    GetData( sval32, "Панель", "А1 Y макс", 1 )
    SetData( sval32, "Панель", "Y макс", 1 )

    GetData( sval32, "Панель", "А1 Y мин", 1 )
    SetData( sval32, "Панель", "Y мин", 1 )

end sub


// Начальные значения для пределов уровней.
sub FillLimits()

    unsigned short n = 0, k = 0
    
    for n = 0 to LIMITS_COUNT / 2 - 1
    
        select case n
        
            case 0
            case 1
            case 2
            case 3
            case 4
            case 5
            case 6
            case 12
            case 13
            case 14
            case 16
            case 17
            case 18
            case 19
            case 25
            
                // Минимум.
                k = 2 * n
                Limits[k] = 0
                
                // Максимум.
                k = k + 1
                Limits[k] = 1000
                
                break
                
            case 7
            case 8
            case 20
            case 21
            case 22
            case 23
            case 24
            
                // Минимум.
                k = 2 * n
                Limits[k] = 0
                
                // Максимум.
                k = k + 1
                Limits[k] = 500
                
                break
                
            case 9
            case 10
            case 11
            
                // Минимум.
                k = 2 * n
                Limits[k] = 0
                
                // Максимум.
                k = k + 1
                Limits[k] = 2000
                
                break

            case 15
            
                // Минимум.
                k = 2 * n
                Limits[k] = -500
                
                // Максимум.
                k = k + 1
                Limits[k] = 1000
                
                break
                
            case 26
            case 27
            case 28
            case 29
            
                // Минимум.
                k = 2 * n
                Limits[k] = 0
                
                // Максимум.
                k = k + 1
                Limits[k] = 100
                
                break
                
            case else
            
                Limits[0] = 0
                
        end select
    
    next
    
    SetData( Limits[0], "Панель", "Пределы", LIMITS_COUNT )
    
end sub


// Инициализация панели при первом запуске.
macro_command main()
    
    bool tmp = false
    unsigned short value = 0
        
    // Выключить вывод TRACE.
    tmp = true
    SetData( tmp, "Панель", "Отладка", 1 )

	// Выходим из макроса, если настройки уже записаны.
	GetData( value, "Панель", "Признак записи", 1 )

	if value == 0 then

        // Установка начальных настроек.
        SetDefaultSettings()

        // Заполняем список каналов.
        FillChannelsList()

        // Начальные значения для пределов уровней.
        FillLimits()

        // Копируем список каналов в список положений.
        CopyChannelsToPlaces()
                
        // Признак конца инициализации.
        value = 1
        SetData( value, "Панель", "Признак записи", 1 )
        
        // Сигнализируем об успешной инициализации.
        tmp = true
        SetData( tmp, "Панель", "Инициализация успешна", 1 )        
        
        Beep()
        
	else

        // Загрузка настроек.
        LoadSettings()

        // Сигнализируем об успешной загрузке.
        Beep()
        
	end if        

end macro_command
